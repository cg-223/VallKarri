[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = """=[SMODS _ "src/utils.lua"]"""
pattern = "return 5"
position = "before"
payload = '''
if next(SMODS.find_card('j_valk_tau_fingers')) then
    return 3
end
if G.GAME.strush_override then
    return G.GAME.strush_override
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = """=[SMODS multiverse "misc/hooks.lua"]"""
pattern = '''G.GAME.chips = G.GAME.chips - G.GAME.blind.chips / 10'''
position = "before"
payload = '''
if G.GAME.blind and G.GAME.blind.name == "bl_valk_fuck" then
    G.FUNCS.DT_lose_game()
    Multiverse.in_undyne = false
    Multiverse.undyne_spears = {}
end
'''
match_indent = true

# copied from jtem again
[[patches]]
[patches.pattern]
target = 'game.lua'
position = 'before'
pattern = "if G.debug_splash_size_toggle then "
payload = '''
if G.STAGE ~= G.STAGES.MAIN_MENU and G.valk_splash then
    G.valk_splash:remove()
    G.valk_splash = nil
end

if not vallkarri then
    error("VallKarri failed to load but patches succeeded. Please ensure your SMODS is up to date")
end

if G.STAGE == G.STAGES.MAIN_MENU and not G.valk_splash then
    vallkarri.initialize_splashtext()
end

if G.valk_splash then
    love.graphics.push()
    G.valk_splash:translate_container()
    G.valk_splash:draw()
    love.graphics.pop()
end
'''
match_indent = true



[[patches]]
[patches.pattern]
target = 'engine/event.lua'
position = 'after'
pattern = "Event = Object:extend()"
payload = "--dummy patch"
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
position = 'after'
pattern = "local info_queue = {}"
payload = '''
if _c.tau and (desc_nodes == full_UI_table.main and not full_UI_table.name) then
    info_queue[#info_queue + 1] = { set = "Other", key = "tauic_info" }
end
'''
match_indent = true


# i wholely, genuinely apologize. this is not the best solution, nor is it close.
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
position = 'at'
pattern = "SMODS.create_mod_badges(card.config.center, badges)"
payload = '''
local cen = card.config.center
if cen then cen.valk_card = card end
SMODS.create_mod_badges(cen, badges)
'''
match_indent = true

